generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StudySession {
  id          String     @id @default(cuid())
  title       String
  description String?
  subject     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  materials   Material[]
}

model Material {
  id             String          @id @default(cuid())
  title          String?
  description    String?
  type           String
  link           String?
  fileName       String?
  rawContent     String?
  status         String
  studySessionId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  topics         String[]
  batchId       String?
  audioLectures  AudioLecture[]
  flashcardDecks FlashcardDeck[]
  studySession   StudySession    @relation(fields: [studySessionId], references: [id])
  quizzes        Quiz[]
  summaries      Summary[]
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  difficulty  String
  timeLimit   Int?
  materialId  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  material    Material   @relation(fields: [materialId], references: [id])
}

model Question {
  id            String   @id @default(cuid())
  text          String
  type          String
  options       Json?
  correctAnswer Json
  explanation   String?
  quizId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model FlashcardDeck {
  id          String      @id @default(cuid())
  title       String
  description String?
  materialId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  flashcards  Flashcard[]
  material    Material    @relation(fields: [materialId], references: [id])
}

model Flashcard {
  id        String        @id @default(cuid())
  front     String
  back      String
  deckId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  imageData String?
  imageUrl  String?
  deck      FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)
}

model Summary {
  id         String   @id @default(cuid())
  title      String
  content    String
  example    String?  // Cultural example content
  materialId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  material   Material @relation(fields: [materialId], references: [id])
}

model AudioLecture {
  id         String   @id @default(cuid())
  title      String
  audioUrl   String
  duration   Int?
  status     String   @default("processing")
  materialId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  material   Material @relation(fields: [materialId], references: [id])
}
